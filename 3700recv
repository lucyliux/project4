#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        self.prev_packet = {}
        self.received_seq_nums = []
        self.received_packets = {}

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def recv(self, msg):
        self.log("Received")
        for i in self.received_seq_nums:
            self.log(str(i))
        msg_seq = msg["seq_num"]
        
        # store the received packet
        self.received_seq_nums.append(msg_seq)
        self.received_packets[msg_seq] = msg
        
        # check if all packets with smaller sequence number have been received
        prev_seq_nums_received = True
        if msg_seq > 0:
            for i in range(0, msg_seq):
                if i not in self.received_seq_nums:
                    prev_seq_nums_received = False
                    break
        
        # if all packets with smaller sequence number have been received, print and ack this packet
        if prev_seq_nums_received:
            self.print_ack(msg)
            # look for received packets with larger sequence numbers that can be printed and ACKed after receiving this packet
            next_seq = msg_seq + 1
            while next_seq in self.received_seq_nums:
                self.print_ack(self.received_packets[next_seq])
                next_seq += 1
        
    def print_ack(self, msg):
        # Print out the data to stdout
        print(msg["data"], end='', flush=True)

        # Always send back an ack
        self.send({ 
                    "type": "ack",
                    "seq_num": msg["seq_num"],
                    })
        self.log("ACKed data message %s" % msg["data"][0:20] + "seq: " + str(msg["seq_num"]))
    
    def reset_received(self, window):
        if len(self.received_packets) == window:
            self.received_packets = {}
            self.received_seq_nums = []
            
    def update_prev_packet(self, msg):
        self.prev_packet = msg
        
    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))
                self.log("Received data message %s" % msg["data"][0:20] + "seq: " + str(msg["seq_num"]))

                if msg != self.prev_packet:
                    self.recv(msg)
                    self.update_prev_packet(msg)
                    self.reset_received(msg["adv_window"])

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()