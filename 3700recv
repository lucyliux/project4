#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        
        self.sender_cwnd = -1
        self.out_of_order_packets = {}
        self.acked_seq_nums = []
        self.prev_packet = {}

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def print_ack(self, msg):
        # Print out the data to stdout
        print(msg["data"], end='', flush=True)

        # Always send back an ack
        self.ack(msg)
    
    def ack(self, msg):
        self.send({ 
                   "type": "ack",
                   "seq_num": msg["seq_num"],
                   })
        self.log("ACKed %s" % msg["data"][0:20] + " seq: " + str(msg["seq_num"]))
        
    def isDuplicate(self, msg):
        return msg["seq_num"] in self.acked_seq_nums or msg["seq_num"] in self.out_of_order_packets.keys() or msg == self.prev_packet
    
    def recv(self, msg):
        msg_seq = msg["seq_num"]    
        # if it is not a duplicate packet
        if not self.isDuplicate(msg):
            # if it is in order
            if len(self.acked_seq_nums) == 0 or msg_seq == self.acked_seq_nums[len(self.acked_seq_nums) - 1]:
                self.print_ack(msg)
                self.acked_seq_nums.append(msg_seq)
                self.check_out_of_order_packets(msg_seq)
            # if it is out of order
            else:
                self.out_of_order_packets[msg_seq] = msg
    
    def reset_acked(self):
        if len(self.acked_seq_nums) >= self.sender_cwnd and len(self.out_of_order_packets) == 0:
            self.acked_seq_nums = []
            
    def check_out_of_order_packets(self, seq_num):
        if seq_num + 1 in self.out_of_order_packets.keys():
            msg = self.out_of_order_packets[seq_num + 1]
            self.print_ack(msg)
            self.check_out_of_order_packets(seq_num + 1)
             
    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))
                self.log("Received data message %s" % msg["data"][0:20] + " seq: " + str(msg["seq_num"]))
                # self.print_ack(msg)
                if self.sender_cwnd == -1:
                    self.sender_cwnd = msg["cwnd"]
                self.recv(msg)
                self.reset_acked()
                self.prev_packet = msg

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()