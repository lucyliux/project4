#!/usr/bin/env -S python3 -u
import hashlib
import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        
        self.out_of_order_packets = {}
        self.prev_print_ack = -1

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()
        
    # Print out the data to stdout
    def print(self, msg):
        print(msg["data"], end='', flush=True)
        self.log("Printing %s" %msg["data"][0:20])
        self.prev_print_ack = msg["seq_num"]

    def ack(self, msg):
        seq_num = msg["seq_num"]
        self.send({ 
                   "type": "ack",
                   "seq_num": seq_num,
                   })
        self.log("Acknowledging packet %s" %seq_num)
    
    def recv(self, msg):
        if self.validate_hash(msg):
            msg_seq = msg["seq_num"] 
            # if it is not a duplicate packet
            if not self.isDuplicate(msg_seq):
                # if it is in order
                self.log("Msg seq: %s" %msg_seq)
                self.log('Expecting: %s' %(self.prev_print_ack + 1))
                if msg_seq == self.prev_print_ack + 1:
                    self.print(msg)
                    self.check_out_of_order_packets()
                    self.ack(msg)
                    return
                # if it is out of order
                else:
                    self.out_of_order_packets[msg_seq] = msg
            self.ack(msg)
    
    def check_out_of_order_packets(self):
        seq_num = self.prev_print_ack + 1
        self.log("Checking %s" %seq_num)
        if seq_num in self.out_of_order_packets.keys():
            msg = self.out_of_order_packets[seq_num]
            self.log("Now able to ack %s" %seq_num)
            self.print(msg)
            self.check_out_of_order_packets()

    def isDuplicate(self, seq_num):
        result = seq_num <= self.prev_print_ack
        if result:
            self.log("Duplicate %s" %seq_num + " with last acked " + str(self.prev_print_ack))
        return result
    
    def validate_hash(self, msg):
        result = hashlib.md5(msg["data"].encode('utf-8')).hexdigest() == msg["hash"]
        return result
    
    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                try:
                    msg = json.loads(data.decode('utf-8'))
                    self.log("Received data message %s" % msg["data"][0:20])
                    self.recv(msg)
                except:
                    self.log("Could not load json")
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()